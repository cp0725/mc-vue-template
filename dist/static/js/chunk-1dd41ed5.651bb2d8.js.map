{"version":3,"sources":["webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar/BaseBarSeries.js","webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar/BarSeries.js","webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar/BarView.js","webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar/helper.js","webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar/barItemStyle.js","webpack:///./node_modules/_echarts@4.1.0@echarts/lib/chart/bar.js"],"names":["SeriesModel","__webpack_require__","createListFromArray","_default","extend","type","getInitialData","option","ecModel","this","getSource","getMarkerPosition","value","coordSys","coordinateSystem","pt","dataToPoint","clampData","data","getData","offset","getLayout","size","offsetIndex","getBaseAxis","isHorizontal","NaN","defaultOption","zlevel","z","legendHoverLink","barMinHeight","barMinAngle","large","largeThreshold","progressive","progressiveChunkMode","itemStyle","emphasis","module","exports","BaseBarSeries","dependencies","brushSelector","getProgressive","get","getProgressiveThreshold","progressiveThreshold","_config","echarts","__DEV__","zrUtil","graphic","_helper","setLabel","Model","barItemStyle","Path","BAR_BORDER_WIDTH_QUERY","prototype","extendChartView","render","seriesModel","api","_updateDrawMode","coordinateSystemType","_isLargeDraw","_renderLarge","_renderNormal","group","incrementalPrepareRender","_clear","incrementalRender","params","_incrementalRenderLarge","isLargeDraw","pipelineContext","isHorizontalOrRadial","oldData","_data","coord","baseAxis","dim","animationModel","isAnimationEnabled","diff","add","dataIndex","hasValue","itemModel","getItemModel","layout","el","elementCreator","setItemGraphicEl","updateStyle","update","newIndex","oldIndex","getItemGraphicEl","updateProps","shape","remove","removeRect","removeSector","execute","createLarge","dispose","noop","eachItemGraphicEl","removeAll","cartesian2d","isUpdate","rect","Rect","rectShape","animateProperty","animateTarget","polar","isRadial","clockwise","startAngle","endAngle","sector","Sector","defaults","sectorShape","style","text","width","parent","r","r0","getItemLayout","fixedLineWidth","getLineWidth","signX","signY","height","x","y","cx","cy","isPolar","color","getItemVisual","opacity","itemStyleModel","getModel","hoverStyle","getBarItemStyle","setShape","useStyle","fill","cursorStyle","getShallow","attr","labelPositionOutside","setHoverStyle","rawLayout","lineWidth","Math","min","abs","LargePath","points","buildPath","ctx","startPoint","__startPoint","valueIdx","__valueIdx","i","length","moveTo","lineTo","incremental","setLargeStyle","borderColor","getVisual","getItemStyle","stroke","_labelHelper","getDefaultLabel","normalStyle","labelModel","hoverLabelModel","setLabelStyle","labelFetcher","labelDataIndex","defaultText","isRectText","autoColor","fixPosition","textPosition","makeStyleMapper","excludes","getBorderLineDash","lineDash","_barGrid","largeLayout","registerLayout","curry","registerVisual","seriesType","reset","setVisual"],"mappings":"qGAAA,IAAAA,EAAkBC,EAAQ,QAE1BC,EAA0BD,EAAQ,QAoBlCE,EAAAH,EAAAI,QACAC,KAAA,sBACAC,eAAA,SAAAC,EAAAC,GACA,OAAAN,EAAAO,KAAAC,YAAAD,OAEAE,kBAAA,SAAAC,GACA,IAAAC,EAAAJ,KAAAK,iBAEA,GAAAD,EAAA,CAEA,IAAAE,EAAAF,EAAAG,YAAAH,EAAAI,UAAAL,IACAM,EAAAT,KAAAU,UACAC,EAAAF,EAAAG,UAAA,UACAC,EAAAJ,EAAAG,UAAA,QACAE,EAAAV,EAAAW,cAAAC,eAAA,IAEA,OADAV,EAAAQ,IAAAH,EAAAE,EAAA,EACAP,EAGA,OAAAW,UAEAC,eACAC,OAAA,EAEAC,EAAA,EAEAf,iBAAA,cACAgB,iBAAA,EAMAC,aAAA,EAEAC,YAAA,EAEAC,OAAA,EACAC,eAAA,IACAC,YAAA,IACAC,qBAAA,MAWAC,aACAC,eAIAC,EAAAC,QAAArC,0BC9EA,IAAAsC,EAAoBxC,EAAQ,QAoB5BE,EAAAsC,EAAArC,QACAC,KAAA,aACAqC,cAAA,gBACAC,cAAA,OAKAC,eAAA,WAEA,QAAAnC,KAAAoC,IAAA,UAAApC,KAAAoC,IAAA,gBAMAC,wBAAA,WAEA,IAAAC,EAAAtC,KAAAoC,IAAA,wBACAX,EAAAzB,KAAAoC,IAAA,kBAMA,OAJAX,EAAAa,IACAA,EAAAb,GAGAa,KAIAR,EAAAC,QAAArC,0BCjDA,IAAA6C,EAAc/C,EAAQ,QAItBgD,GAFAD,EAAAE,QAEcjD,EAAQ,SAEtBkD,EAAalD,EAAQ,QAErBmD,EAAcnD,EAAQ,QAEtBoD,EAAcpD,EAAQ,QAEtBqD,EAAAD,EAAAC,SAEAC,EAAYtD,EAAQ,QAEpBuD,EAAmBvD,EAAQ,QAE3BwD,EAAWxD,EAAQ,QAoBnByD,GAAA,8BAGAP,EAAA/C,OAAAmD,EAAAI,UAAAH,GAEA,IAAArD,EAAA8C,EAAAW,iBACAvD,KAAA,MACAwD,OAAA,SAAAC,EAAAtD,EAAAuD,GACAtD,KAAAuD,gBAAAF,GAEA,IAAAG,EAAAH,EAAAjB,IAAA,oBAMA,MAJA,gBAAAoB,GAAA,UAAAA,IACAxD,KAAAyD,aAAAzD,KAAA0D,aAAAL,EAAAtD,EAAAuD,GAAAtD,KAAA2D,cAAAN,EAAAtD,EAAAuD,IAGAtD,KAAA4D,OAEAC,yBAAA,SAAAR,EAAAtD,EAAAuD,GACAtD,KAAA8D,SAEA9D,KAAAuD,gBAAAF,IAEAU,kBAAA,SAAAC,EAAAX,EAAAtD,EAAAuD,GAEAtD,KAAAiE,wBAAAD,EAAAX,IAEAE,gBAAA,SAAAF,GACA,IAAAa,EAAAb,EAAAc,gBAAA3C,OAEA,MAAAxB,KAAAyD,cAAAS,EAAAlE,KAAAyD,gBACAzD,KAAAyD,aAAAS,EAEAlE,KAAA8D,WAGAH,cAAA,SAAAN,EAAAtD,EAAAuD,GACA,IAKAc,EALAR,EAAA5D,KAAA4D,MACAnD,EAAA4C,EAAA3C,UACA2D,EAAArE,KAAAsE,MACAC,EAAAlB,EAAAhD,iBACAmE,EAAAD,EAAAxD,cAGA,gBAAAwD,EAAA3E,KACAwE,EAAAI,EAAAxD,eACK,UAAAuD,EAAA3E,OACLwE,EAAA,UAAAI,EAAAC,KAGA,IAAAC,EAAArB,EAAAsB,qBAAAtB,EAAA,KACA5C,EAAAmE,KAAAP,GAAAQ,IAAA,SAAAC,GACA,GAAArE,EAAAsE,SAAAD,GAAA,CAIA,IAAAE,EAAAvE,EAAAwE,aAAAH,GACAI,EAAAtE,EAAA2D,EAAA3E,MAAAa,EAAAqE,EAAAE,GACAG,EAAAC,EAAAb,EAAA3E,MAAAa,EAAAqE,EAAAE,EAAAE,EAAAd,EAAAM,GACAjE,EAAA4E,iBAAAP,EAAAK,GACAvB,EAAAiB,IAAAM,GACAG,EAAAH,EAAA1E,EAAAqE,EAAAE,EAAAE,EAAA7B,EAAAe,EAAA,UAAAG,EAAA3E,SACK2F,OAAA,SAAAC,EAAAC,GACL,IAAAN,EAAAd,EAAAqB,iBAAAD,GAEA,GAAAhF,EAAAsE,SAAAS,GAAA,CAKA,IAAAR,EAAAvE,EAAAwE,aAAAO,GACAN,EAAAtE,EAAA2D,EAAA3E,MAAAa,EAAA+E,EAAAR,GAEAG,EACAxC,EAAAgD,YAAAR,GACAS,MAAAV,GACSR,EAAAc,GAETL,EAAAC,EAAAb,EAAA3E,MAAAa,EAAA+E,EAAAR,EAAAE,EAAAd,EAAAM,GAAA,GAGAjE,EAAA4E,iBAAAG,EAAAL,GAEAvB,EAAAiB,IAAAM,GACAG,EAAAH,EAAA1E,EAAA+E,EAAAR,EAAAE,EAAA7B,EAAAe,EAAA,UAAAG,EAAA3E,WAlBAgE,EAAAiC,OAAAV,KAmBKU,OAAA,SAAAf,GACL,IAAAK,EAAAd,EAAAqB,iBAAAZ,GAEA,gBAAAP,EAAA3E,KACAuF,GAAAW,EAAAhB,EAAAJ,EAAAS,GAEAA,GAAAY,EAAAjB,EAAAJ,EAAAS,KAEKa,UACLhG,KAAAsE,MAAA7D,GAEAiD,aAAA,SAAAL,EAAAtD,EAAAuD,GACAtD,KAAA8D,SAEAmC,EAAA5C,EAAArD,KAAA4D,QAEAK,wBAAA,SAAAD,EAAAX,GACA4C,EAAA5C,EAAArD,KAAA4D,OAAA,IAEAsC,QAAAxD,EAAAyD,KACAN,OAAA,SAAA9F,GACAC,KAAA8D,OAAA/D,IAEA+D,OAAA,SAAA/D,GACA,IAAA6D,EAAA5D,KAAA4D,MACAnD,EAAAT,KAAAsE,MAEAvE,KAAAqC,IAAA,cAAA3B,IAAAT,KAAAyD,aACAhD,EAAA2F,kBAAA,SAAAjB,GACA,WAAAA,EAAAvF,KACAmG,EAAAZ,EAAAL,UAAA/E,EAAAoF,GAEAW,EAAAX,EAAAL,UAAA/E,EAAAoF,KAIAvB,EAAAyC,YAGArG,KAAAsE,MAAA,QAIAc,GACAkB,YAAA,SAAA7F,EAAAqE,EAAAE,EAAAE,EAAAlE,EAAA0D,EAAA6B,GACA,IAAAC,EAAA,IAAA7D,EAAA8D,MACAb,MAAAlD,EAAA/C,UAA6BuF,KAG7B,GAAAR,EAAA,CACA,IAAAgC,EAAAF,EAAAZ,MACAe,EAAA3F,EAAA,iBACA4F,KACAF,EAAAC,GAAA,EACAC,EAAAD,GAAAzB,EAAAyB,GACAhE,EAAA4D,EAAA,2BAAAC,GACAZ,MAAAgB,GACOlC,EAAAI,GAGP,OAAA0B,GAEAK,MAAA,SAAApG,EAAAqE,EAAAE,EAAAE,EAAA4B,EAAApC,EAAA6B,GAKA,IAAAQ,EAAA7B,EAAA8B,WAAA9B,EAAA+B,SACAC,EAAA,IAAAvE,EAAAwE,QACAvB,MAAAlD,EAAA0E,UACAL,aACO7B,KAGP,GAAAR,EAAA,CACA,IAAA2C,EAAAH,EAAAtB,MACAe,EAAAG,EAAA,eACAF,KACAS,EAAAV,GAAAG,EAAA,EAAA5B,EAAA8B,WACAJ,EAAAD,GAAAzB,EAAAyB,GACAhE,EAAA4D,EAAA,2BAAAW,GACAtB,MAAAgB,GACOlC,EAAAI,GAGP,OAAAoC,IAIA,SAAApB,EAAAhB,EAAAJ,EAAAS,GAEAA,EAAAmC,MAAAC,KAAA,KACA5E,EAAAgD,YAAAR,GACAS,OACA4B,MAAA,IAEG9C,EAAAI,EAAA,WACHK,EAAAsC,QAAAtC,EAAAsC,OAAA5B,OAAAV,KAIA,SAAAY,EAAAjB,EAAAJ,EAAAS,GAEAA,EAAAmC,MAAAC,KAAA,KACA5E,EAAAgD,YAAAR,GACAS,OACA8B,EAAAvC,EAAAS,MAAA+B,KAEGjD,EAAAI,EAAA,WACHK,EAAAsC,QAAAtC,EAAAsC,OAAA5B,OAAAV,KAIA,IAAAvE,GACA0F,YAAA,SAAA7F,EAAAqE,EAAAE,GACA,IAAAE,EAAAzE,EAAAmH,cAAA9C,GACA+C,EAAAC,EAAA9C,EAAAE,GAEA6C,EAAA7C,EAAAsC,MAAA,OACAQ,EAAA9C,EAAA+C,OAAA,OACA,OACAC,EAAAhD,EAAAgD,EAAAH,EAAAF,EAAA,EACAM,EAAAjD,EAAAiD,EAAAH,EAAAH,EAAA,EACAL,MAAAtC,EAAAsC,MAAAO,EAAAF,EACAI,OAAA/C,EAAA+C,OAAAD,EAAAH,IAGAhB,MAAA,SAAApG,EAAAqE,EAAAE,GACA,IAAAE,EAAAzE,EAAAmH,cAAA9C,GACA,OACAsD,GAAAlD,EAAAkD,GACAC,GAAAnD,EAAAmD,GACAV,GAAAzC,EAAAyC,GACAD,EAAAxC,EAAAwC,EACAV,WAAA9B,EAAA8B,WACAC,SAAA/B,EAAA+B,YAKA,SAAA3B,EAAAH,EAAA1E,EAAAqE,EAAAE,EAAAE,EAAA7B,EAAArC,EAAAsH,GACA,IAAAC,EAAA9H,EAAA+H,cAAA1D,EAAA,SACA2D,EAAAhI,EAAA+H,cAAA1D,EAAA,WACA4D,EAAA1D,EAAA2D,SAAA,aACAC,EAAA5D,EAAA2D,SAAA,sBAAAE,kBAEAP,GACAnD,EAAA2D,SAAA,IAAAJ,EAAAtG,IAAA,uBAGA+C,EAAA4D,SAAArG,EAAA0E,UACA4B,KAAAT,EACAE,WACGC,EAAAG,oBACH,IAAAI,EAAAjE,EAAAkE,WAAA,UACAD,GAAA9D,EAAAgE,KAAA,SAAAF,GACA,IAAAG,EAAApI,EAAAkE,EAAA+C,OAAA,iBAAA/C,EAAAsC,MAAA,iBAEAc,GACAzF,EAAAsC,EAAAmC,MAAAsB,EAAA5D,EAAAuD,EAAAlF,EAAAyB,EAAAsE,GAGAzG,EAAA0G,cAAAlE,EAAAyD,GAIA,SAAAd,EAAA9C,EAAAsE,GACA,IAAAC,EAAAvE,EAAA5C,IAAAa,IAAA,EACA,OAAAuG,KAAAC,IAAAF,EAAAC,KAAAE,IAAAJ,EAAA9B,OAAAgC,KAAAE,IAAAJ,EAAArB,SAGA,IAAA0B,EAAA3G,EAAArD,QACAC,KAAA,WACAgG,OACAgE,WAEAC,UAAA,SAAAC,EAAAlE,GAOA,IAJA,IAAAgE,EAAAhE,EAAAgE,OACAG,EAAA/J,KAAAgK,aACAC,EAAAjK,KAAAkK,WAEAC,EAAA,EAAmBA,EAAAP,EAAAQ,OAAmBD,GAAA,EACtCJ,EAAA/J,KAAAkK,YAAAN,EAAAO,EAAAF,GACAH,EAAAO,OAAAN,EAAA,GAAAA,EAAA,IACAD,EAAAQ,OAAAV,EAAAO,GAAAP,EAAAO,EAAA,OAKA,SAAAlE,EAAA5C,EAAAO,EAAA2G,GAEA,IAAA9J,EAAA4C,EAAA3C,UACAqJ,KACAE,EAAAxJ,EAAAG,UAAA,2BACAmJ,EAAA,EAAAE,GAAAxJ,EAAAG,UAAA,kBACA,IAAAuE,EAAA,IAAAwE,GACA/D,OACAgE,OAAAnJ,EAAAG,UAAA,gBAEA2J,gBACAP,aAAAD,EACAG,WAAAD,IAEArG,EAAAiB,IAAAM,GACAqF,EAAArF,EAAA9B,EAAA5C,GAGA,SAAA+J,EAAArF,EAAA9B,EAAA5C,GACA,IAAAgK,EAAAhK,EAAAiK,UAAA,gBAAAjK,EAAAiK,UAAA,SACA9I,EAAAyB,EAAAsF,SAAA,aAAAgC,cAAA,wBACAxF,EAAA4D,SAAAnH,GACAuD,EAAAmC,MAAA0B,KAAA,KACA7D,EAAAmC,MAAAsD,OAAAH,EACAtF,EAAAmC,MAAAiC,UAAA9I,EAAAG,UAAA,YAGAkB,EAAAC,QAAArC,wBCrVA,IAAAiD,EAAcnD,EAAQ,QAEtBqL,EAAmBrL,EAAQ,QAE3BsL,EAAAD,EAAAC,gBAoBA,SAAAjI,EAAAkI,EAAAnC,EAAA5D,EAAAuD,EAAAlF,EAAAyB,EAAAsE,GACA,IAAA4B,EAAAhG,EAAA2D,SAAA,SACAsC,EAAAjG,EAAA2D,SAAA,kBACAhG,EAAAuI,cAAAH,EAAAnC,EAAAoC,EAAAC,GACAE,aAAA9H,EACA+H,eAAAtG,EACAuG,YAAAP,EAAAzH,EAAA3C,UAAAoE,GACAwG,YAAA,EACAC,UAAAhD,IAEAiD,EAAAT,GACAS,EAAA5C,GAGA,SAAA4C,EAAAlE,EAAA8B,GACA,YAAA9B,EAAAmE,eACAnE,EAAAmE,aAAArC,GAIArH,EAAAc,iCC5CA,IAAA6I,EAAsBlM,EAAQ,QAoB9BqJ,EAAA6C,IAAA,sEACA,2IACAhM,GACAmJ,gBAAA,SAAA8C,GACA,IAAArE,EAAAuB,EAAA7I,KAAA2L,GAEA,GAAA3L,KAAA4L,kBAAA,CACA,IAAAC,EAAA7L,KAAA4L,oBACAC,IAAAvE,EAAAuE,YAGA,OAAAvE,IAGAxF,EAAAC,QAAArC,wBClCA,IAAA8C,EAAchD,EAAQ,QAEtBkD,EAAalD,EAAQ,QAErBsM,EAAetM,EAAQ,QAEvB0F,EAAA4G,EAAA5G,OACA6G,EAAAD,EAAAC,YAEAvM,EAAQ,QAERA,EAAQ,QAERA,EAAQ,QAERA,EAAQ,QAqBRgD,EAAAwJ,eAAAtJ,EAAAuJ,MAAA/G,EAAA,QAEA1C,EAAAwJ,eAAAD,GACAvJ,EAAA0J,gBACAC,WAAA,MACAC,MAAA,SAAA/I,GAEAA,EAAA3C,UAAA2L,UAAA","file":"static/js/chunk-1dd41ed5.651bb2d8.js","sourcesContent":["var SeriesModel = require(\"../../model/Series\");\n\nvar createListFromArray = require(\"../helper/createListFromArray\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.__base_bar__',\n  getInitialData: function (option, ecModel) {\n    return createListFromArray(this.getSource(), this);\n  },\n  getMarkerPosition: function (value) {\n    var coordSys = this.coordinateSystem;\n\n    if (coordSys) {\n      // PENDING if clamp ?\n      var pt = coordSys.dataToPoint(coordSys.clampData(value));\n      var data = this.getData();\n      var offset = data.getLayout('offset');\n      var size = data.getLayout('size');\n      var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n      pt[offsetIndex] += offset + size / 2;\n      return pt;\n    }\n\n    return [NaN, NaN];\n  },\n  defaultOption: {\n    zlevel: 0,\n    // 一级层叠\n    z: 2,\n    // 二级层叠\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    // stack: null\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // 最小高度改为0\n    barMinHeight: 0,\n    // 最小角度为0，仅对极坐标系下的柱状图有效\n    barMinAngle: 0,\n    // cursor: null,\n    large: false,\n    largeThreshold: 400,\n    progressive: 5e3,\n    progressiveChunkMode: 'mod',\n    // barMaxWidth: null,\n    // 默认自适应\n    // barWidth: null,\n    // 柱间距离，默认为柱形宽度的30%，可设固定值\n    // barGap: '30%',\n    // 类目间柱形距离，默认为类目间距的20%，可设固定值\n    // barCategoryGap: '20%',\n    // label: {\n    //      show: false\n    // },\n    itemStyle: {},\n    emphasis: {}\n  }\n});\n\nmodule.exports = _default;","var BaseBarSeries = require(\"./BaseBarSeries\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = BaseBarSeries.extend({\n  type: 'series.bar',\n  dependencies: ['grid', 'polar'],\n  brushSelector: 'rect',\n\n  /**\n   * @override\n   */\n  getProgressive: function () {\n    // Do not support progressive in normal mode.\n    return this.get('large') ? this.get('progressive') : false;\n  },\n\n  /**\n   * @override\n   */\n  getProgressiveThreshold: function () {\n    // Do not support progressive in normal mode.\n    var progressiveThreshold = this.get('progressiveThreshold');\n    var largeThreshold = this.get('largeThreshold');\n\n    if (largeThreshold > progressiveThreshold) {\n      progressiveThreshold = largeThreshold;\n    }\n\n    return progressiveThreshold;\n  }\n});\n\nmodule.exports = _default;","var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar _helper = require(\"./helper\");\n\nvar setLabel = _helper.setLabel;\n\nvar Model = require(\"../../model/Model\");\n\nvar barItemStyle = require(\"./barItemStyle\");\n\nvar Path = require(\"zrender/lib/graphic/Path\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'barBorderWidth']; // FIXME\n// Just for compatible with ec2.\n\nzrUtil.extend(Model.prototype, barItemStyle);\n\nvar _default = echarts.extendChartView({\n  type: 'bar',\n  render: function (seriesModel, ecModel, api) {\n    this._updateDrawMode(seriesModel);\n\n    var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n    if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {\n      this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api);\n    } else {}\n\n    return this.group;\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this._clear();\n\n    this._updateDrawMode(seriesModel);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    // Do not support progressive in normal mode.\n    this._incrementalRenderLarge(params, seriesModel);\n  },\n  _updateDrawMode: function (seriesModel) {\n    var isLargeDraw = seriesModel.pipelineContext.large;\n\n    if (this._isLargeDraw == null || isLargeDraw ^ this._isLargeDraw) {\n      this._isLargeDraw = isLargeDraw;\n\n      this._clear();\n    }\n  },\n  _renderNormal: function (seriesModel, ecModel, api) {\n    var group = this.group;\n    var data = seriesModel.getData();\n    var oldData = this._data;\n    var coord = seriesModel.coordinateSystem;\n    var baseAxis = coord.getBaseAxis();\n    var isHorizontalOrRadial;\n\n    if (coord.type === 'cartesian2d') {\n      isHorizontalOrRadial = baseAxis.isHorizontal();\n    } else if (coord.type === 'polar') {\n      isHorizontalOrRadial = baseAxis.dim === 'angle';\n    }\n\n    var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n    data.diff(oldData).add(function (dataIndex) {\n      if (!data.hasValue(dataIndex)) {\n        return;\n      }\n\n      var itemModel = data.getItemModel(dataIndex);\n      var layout = getLayout[coord.type](data, dataIndex, itemModel);\n      var el = elementCreator[coord.type](data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel);\n      data.setItemGraphicEl(dataIndex, el);\n      group.add(el);\n      updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');\n    }).update(function (newIndex, oldIndex) {\n      var el = oldData.getItemGraphicEl(oldIndex);\n\n      if (!data.hasValue(newIndex)) {\n        group.remove(el);\n        return;\n      }\n\n      var itemModel = data.getItemModel(newIndex);\n      var layout = getLayout[coord.type](data, newIndex, itemModel);\n\n      if (el) {\n        graphic.updateProps(el, {\n          shape: layout\n        }, animationModel, newIndex);\n      } else {\n        el = elementCreator[coord.type](data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true);\n      }\n\n      data.setItemGraphicEl(newIndex, el); // Add back\n\n      group.add(el);\n      updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');\n    }).remove(function (dataIndex) {\n      var el = oldData.getItemGraphicEl(dataIndex);\n\n      if (coord.type === 'cartesian2d') {\n        el && removeRect(dataIndex, animationModel, el);\n      } else {\n        el && removeSector(dataIndex, animationModel, el);\n      }\n    }).execute();\n    this._data = data;\n  },\n  _renderLarge: function (seriesModel, ecModel, api) {\n    this._clear();\n\n    createLarge(seriesModel, this.group);\n  },\n  _incrementalRenderLarge: function (params, seriesModel) {\n    createLarge(seriesModel, this.group, true);\n  },\n  dispose: zrUtil.noop,\n  remove: function (ecModel) {\n    this._clear(ecModel);\n  },\n  _clear: function (ecModel) {\n    var group = this.group;\n    var data = this._data;\n\n    if (ecModel && ecModel.get('animation') && data && !this._isLargeDraw) {\n      data.eachItemGraphicEl(function (el) {\n        if (el.type === 'sector') {\n          removeSector(el.dataIndex, ecModel, el);\n        } else {\n          removeRect(el.dataIndex, ecModel, el);\n        }\n      });\n    } else {\n      group.removeAll();\n    }\n\n    this._data = null;\n  }\n});\n\nvar elementCreator = {\n  cartesian2d: function (data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {\n    var rect = new graphic.Rect({\n      shape: zrUtil.extend({}, layout)\n    }); // Animation\n\n    if (animationModel) {\n      var rectShape = rect.shape;\n      var animateProperty = isHorizontal ? 'height' : 'width';\n      var animateTarget = {};\n      rectShape[animateProperty] = 0;\n      animateTarget[animateProperty] = layout[animateProperty];\n      graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n        shape: animateTarget\n      }, animationModel, dataIndex);\n    }\n\n    return rect;\n  },\n  polar: function (data, dataIndex, itemModel, layout, isRadial, animationModel, isUpdate) {\n    // Keep the same logic with bar in catesion: use end value to control\n    // direction. Notice that if clockwise is true (by default), the sector\n    // will always draw clockwisely, no matter whether endAngle is greater\n    // or less than startAngle.\n    var clockwise = layout.startAngle < layout.endAngle;\n    var sector = new graphic.Sector({\n      shape: zrUtil.defaults({\n        clockwise: clockwise\n      }, layout)\n    }); // Animation\n\n    if (animationModel) {\n      var sectorShape = sector.shape;\n      var animateProperty = isRadial ? 'r' : 'endAngle';\n      var animateTarget = {};\n      sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;\n      animateTarget[animateProperty] = layout[animateProperty];\n      graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {\n        shape: animateTarget\n      }, animationModel, dataIndex);\n    }\n\n    return sector;\n  }\n};\n\nfunction removeRect(dataIndex, animationModel, el) {\n  // Not show text when animating\n  el.style.text = null;\n  graphic.updateProps(el, {\n    shape: {\n      width: 0\n    }\n  }, animationModel, dataIndex, function () {\n    el.parent && el.parent.remove(el);\n  });\n}\n\nfunction removeSector(dataIndex, animationModel, el) {\n  // Not show text when animating\n  el.style.text = null;\n  graphic.updateProps(el, {\n    shape: {\n      r: el.shape.r0\n    }\n  }, animationModel, dataIndex, function () {\n    el.parent && el.parent.remove(el);\n  });\n}\n\nvar getLayout = {\n  cartesian2d: function (data, dataIndex, itemModel) {\n    var layout = data.getItemLayout(dataIndex);\n    var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth\n\n    var signX = layout.width > 0 ? 1 : -1;\n    var signY = layout.height > 0 ? 1 : -1;\n    return {\n      x: layout.x + signX * fixedLineWidth / 2,\n      y: layout.y + signY * fixedLineWidth / 2,\n      width: layout.width - signX * fixedLineWidth,\n      height: layout.height - signY * fixedLineWidth\n    };\n  },\n  polar: function (data, dataIndex, itemModel) {\n    var layout = data.getItemLayout(dataIndex);\n    return {\n      cx: layout.cx,\n      cy: layout.cy,\n      r0: layout.r0,\n      r: layout.r,\n      startAngle: layout.startAngle,\n      endAngle: layout.endAngle\n    };\n  }\n};\n\nfunction updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {\n  var color = data.getItemVisual(dataIndex, 'color');\n  var opacity = data.getItemVisual(dataIndex, 'opacity');\n  var itemStyleModel = itemModel.getModel('itemStyle');\n  var hoverStyle = itemModel.getModel('emphasis.itemStyle').getBarItemStyle();\n\n  if (!isPolar) {\n    el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n  }\n\n  el.useStyle(zrUtil.defaults({\n    fill: color,\n    opacity: opacity\n  }, itemStyleModel.getBarItemStyle()));\n  var cursorStyle = itemModel.getShallow('cursor');\n  cursorStyle && el.attr('cursor', cursorStyle);\n  var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';\n\n  if (!isPolar) {\n    setLabel(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);\n  }\n\n  graphic.setHoverStyle(el, hoverStyle);\n} // In case width or height are too small.\n\n\nfunction getLineWidth(itemModel, rawLayout) {\n  var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n  return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n}\n\nvar LargePath = Path.extend({\n  type: 'largeBar',\n  shape: {\n    points: []\n  },\n  buildPath: function (ctx, shape) {\n    // Drawing lines is more efficient than drawing\n    // a whole line or drawing rects.\n    var points = shape.points;\n    var startPoint = this.__startPoint;\n    var valueIdx = this.__valueIdx;\n\n    for (var i = 0; i < points.length; i += 2) {\n      startPoint[this.__valueIdx] = points[i + valueIdx];\n      ctx.moveTo(startPoint[0], startPoint[1]);\n      ctx.lineTo(points[i], points[i + 1]);\n    }\n  }\n});\n\nfunction createLarge(seriesModel, group, incremental) {\n  // TODO support polar\n  var data = seriesModel.getData();\n  var startPoint = [];\n  var valueIdx = data.getLayout('valueAxisHorizontal') ? 1 : 0;\n  startPoint[1 - valueIdx] = data.getLayout('valueAxisStart');\n  var el = new LargePath({\n    shape: {\n      points: data.getLayout('largePoints')\n    },\n    incremental: !!incremental,\n    __startPoint: startPoint,\n    __valueIdx: valueIdx\n  });\n  group.add(el);\n  setLargeStyle(el, seriesModel, data);\n}\n\nfunction setLargeStyle(el, seriesModel, data) {\n  var borderColor = data.getVisual('borderColor') || data.getVisual('color');\n  var itemStyle = seriesModel.getModel('itemStyle').getItemStyle(['color', 'borderColor']);\n  el.useStyle(itemStyle);\n  el.style.fill = null;\n  el.style.stroke = borderColor;\n  el.style.lineWidth = data.getLayout('barWidth');\n}\n\nmodule.exports = _default;","var graphic = require(\"../../util/graphic\");\n\nvar _labelHelper = require(\"../helper/labelHelper\");\n\nvar getDefaultLabel = _labelHelper.getDefaultLabel;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {\n  var labelModel = itemModel.getModel('label');\n  var hoverLabelModel = itemModel.getModel('emphasis.label');\n  graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {\n    labelFetcher: seriesModel,\n    labelDataIndex: dataIndex,\n    defaultText: getDefaultLabel(seriesModel.getData(), dataIndex),\n    isRectText: true,\n    autoColor: color\n  });\n  fixPosition(normalStyle);\n  fixPosition(hoverStyle);\n}\n\nfunction fixPosition(style, labelPositionOutside) {\n  if (style.textPosition === 'outside') {\n    style.textPosition = labelPositionOutside;\n  }\n}\n\nexports.setLabel = setLabel;","var makeStyleMapper = require(\"../../model/mixin/makeStyleMapper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2\n['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);\nvar _default = {\n  getBarItemStyle: function (excludes) {\n    var style = getBarItemStyle(this, excludes);\n\n    if (this.getBorderLineDash) {\n      var lineDash = this.getBorderLineDash();\n      lineDash && (style.lineDash = lineDash);\n    }\n\n    return style;\n  }\n};\nmodule.exports = _default;","var echarts = require(\"../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _barGrid = require(\"../layout/barGrid\");\n\nvar layout = _barGrid.layout;\nvar largeLayout = _barGrid.largeLayout;\n\nrequire(\"../coord/cartesian/Grid\");\n\nrequire(\"./bar/BarSeries\");\n\nrequire(\"./bar/BarView\");\n\nrequire(\"../component/gridSimple\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// In case developer forget to include grid component\necharts.registerLayout(zrUtil.curry(layout, 'bar')); // Should after normal bar layout, otherwise it is blocked by normal bar layout.\n\necharts.registerLayout(largeLayout);\necharts.registerVisual({\n  seriesType: 'bar',\n  reset: function (seriesModel) {\n    // Visual coding for legend\n    seriesModel.getData().setVisual('legendSymbol', 'roundRect');\n  }\n});"],"sourceRoot":""}